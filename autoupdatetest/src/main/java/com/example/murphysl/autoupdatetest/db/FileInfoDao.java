package com.example.murphysl.autoupdatetest.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FILE_INFO".
*/
public class FileInfoDao extends AbstractDao<FileInfo, Void> {

    public static final String TABLENAME = "FILE_INFO";

    /**
     * Properties of entity FileInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Filename = new Property(0, String.class, "filename", false, "FILENAME");
        public final static Property My_url = new Property(1, String.class, "my_url", false, "MY_URL");
        public final static Property Length = new Property(2, int.class, "length", false, "LENGTH");
        public final static Property Progress = new Property(3, int.class, "progress", false, "PROGRESS");
    }


    public FileInfoDao(DaoConfig config) {
        super(config);
    }
    
    public FileInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FILE_INFO\" (" + //
                "\"FILENAME\" TEXT NOT NULL ," + // 0: filename
                "\"MY_URL\" TEXT NOT NULL ," + // 1: my_url
                "\"LENGTH\" INTEGER NOT NULL ," + // 2: length
                "\"PROGRESS\" INTEGER NOT NULL );"); // 3: progress
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FILE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FileInfo entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getFilename());
        stmt.bindString(2, entity.getMy_url());
        stmt.bindLong(3, entity.getLength());
        stmt.bindLong(4, entity.getProgress());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FileInfo entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getFilename());
        stmt.bindString(2, entity.getMy_url());
        stmt.bindLong(3, entity.getLength());
        stmt.bindLong(4, entity.getProgress());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public FileInfo readEntity(Cursor cursor, int offset) {
        FileInfo entity = new FileInfo( //
            cursor.getString(offset + 0), // filename
            cursor.getString(offset + 1), // my_url
            cursor.getInt(offset + 2), // length
            cursor.getInt(offset + 3) // progress
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FileInfo entity, int offset) {
        entity.setFilename(cursor.getString(offset + 0));
        entity.setMy_url(cursor.getString(offset + 1));
        entity.setLength(cursor.getInt(offset + 2));
        entity.setProgress(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(FileInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(FileInfo entity) {
        return null;
    }

    @Override
    public boolean hasKey(FileInfo entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
