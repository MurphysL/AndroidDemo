package com.example.murphysl.autoupdatetest.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "THREAD_INFO".
*/
public class ThreadInfoDao extends AbstractDao<ThreadInfo, Void> {

    public static final String TABLENAME = "THREAD_INFO";

    /**
     * Properties of entity ThreadInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Location = new Property(0, String.class, "location", false, "LOCATION");
        public final static Property Start = new Property(1, int.class, "start", false, "START");
        public final static Property End = new Property(2, int.class, "end", false, "END");
        public final static Property IsFinish = new Property(3, Integer.class, "isFinish", false, "IS_FINISH");
        public final static Property ThreadName = new Property(4, String.class, "threadName", false, "THREAD_NAME");
    }


    public ThreadInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ThreadInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"THREAD_INFO\" (" + //
                "\"LOCATION\" TEXT NOT NULL ," + // 0: location
                "\"START\" INTEGER NOT NULL ," + // 1: start
                "\"END\" INTEGER NOT NULL ," + // 2: end
                "\"IS_FINISH\" INTEGER," + // 3: isFinish
                "\"THREAD_NAME\" TEXT NOT NULL );"); // 4: threadName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"THREAD_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ThreadInfo entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getLocation());
        stmt.bindLong(2, entity.getStart());
        stmt.bindLong(3, entity.getEnd());
 
        Integer isFinish = entity.getIsFinish();
        if (isFinish != null) {
            stmt.bindLong(4, isFinish);
        }
        stmt.bindString(5, entity.getThreadName());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ThreadInfo entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getLocation());
        stmt.bindLong(2, entity.getStart());
        stmt.bindLong(3, entity.getEnd());
 
        Integer isFinish = entity.getIsFinish();
        if (isFinish != null) {
            stmt.bindLong(4, isFinish);
        }
        stmt.bindString(5, entity.getThreadName());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ThreadInfo readEntity(Cursor cursor, int offset) {
        ThreadInfo entity = new ThreadInfo( //
            cursor.getString(offset + 0), // location
            cursor.getInt(offset + 1), // start
            cursor.getInt(offset + 2), // end
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // isFinish
            cursor.getString(offset + 4) // threadName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ThreadInfo entity, int offset) {
        entity.setLocation(cursor.getString(offset + 0));
        entity.setStart(cursor.getInt(offset + 1));
        entity.setEnd(cursor.getInt(offset + 2));
        entity.setIsFinish(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setThreadName(cursor.getString(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ThreadInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ThreadInfo entity) {
        return null;
    }

    @Override
    public boolean hasKey(ThreadInfo entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
